{"version":3,"sources":["assets/HappyTreeFriends.png","components/GameStartPage.js","components/LoadSaveGame.js","components/WrongLetters.js","components/Word.js","components/Figure.js","helpers/helpers.js","components/Keyboard.js","components/WinPage.js","components/GamePlayingPage.js","components/LosePage.js","components/ChooseCategoryPage.js","components/WordCategoryPicker.js","components/App.js","components/reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","GameStartPage","_ref","changePageFn","react_default","a","createElement","Fragment","src","logo","alt","onClick","saveGameState","page","arguments","length","undefined","category","word","lives","usedLetters","document","cookie","console","log","WrongLetters","wrongLetters","className","map","letter","i","key","reduce","prev","curr","Word","selectedWord","correctLetters","split","includes","Figure","errors","height","width","class","x1","y1","x2","y2","cx","cy","r","showNotification","setter","setTimeout","checkWin","correct","wrong","status","forEach","Keyboard","Object","objectDestructuringEmpty","type","id","WinPage","currAnswer","GamePlayingPage","currCategory","toLong","saveOnGuess","changeAnswer","_useState","useState","_useState2","slicedToArray","playable","_useState3","_useState4","setCorrectLetters","_useState5","_useState6","setWrongLetters","_useState7","_useState8","setShowNotification","useEffect","handleKeydown","event","keyCode","toLowerCase","show","currentLetters","concat","toConsumableArray","window","addEventListener","removeEventListener","components_Figure","components_WrongLetters","components_Word","setPlayable","playAgain","changePageOnEnd","Keyboard_Keyboard","LosePage","ChooseCategoryPage","setNewCategory","setNewRandCategory","categoryList","toShort","CATEGORIES","Map","getAllCategories","isShortName","_step","allCats","_iterator","_createForOfIteratorHelper","keys","values","s","n","done","cat","value","push","err","e","f","shortName","get","longName","find","_ref2","getRandomElem","array","randFloatingIndex","Math","random","floor","App","pageState","setPageState","setCategory","answer","setAnswer","setLives","_useState9","_useState10","setUsedLetters","wordBank","require","handlePageChange","nextPage","prevPage","handleAnswerChange","newCategory","newWord","categoryShort","has","error","getRandomWord","prevAnswer","data","temp","x","trim","dict","item","index","loadSavedStates","GameStartPage_GameStartPage","ChooseCategoryPage_ChooseCategoryPage","prevCategory","randCat","GamePlayingPage_GamePlayingPage","WinPage_WinPage","LosePage_LosePage","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","components_App"],"mappings":"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","file":"static/js/main.5aca9224.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/HappyTreeFriends.feecc1b4.png\";","import React from 'react'\nimport '../assets/GameStartPage.css';\nimport logo from '../assets/HappyTreeFriends.png';\n\n/**\n * Represents all the elements on the starting page.\n * \n * @param {prop[]} props - variables being passed into this component\n * @returns HTML of the start page.\n */\nexport default function GameStartPage({ changePageFn }) {\n  return (\n    <>\n      <img src={logo} alt=\"Happy Tree Man Game Logo\" />\n      <br />\n      <button onClick={() => {\n        changePageFn('category');\n      }\n      }>Start Playing</button>\n    </>\n  );\n}\n","// ----- functions ----- \n\n/**\n * Saves the page and game state.\n */\nexport function saveGameState(page = \"start\", category = \"\", word = \"\", lives = 7, usedLetters = \"\") {\n  document.cookie = \"page=\" + page;\n  document.cookie = \"category=\" + category;\n  document.cookie = \"word=\" + word;\n  document.cookie = \"lives=\" + lives;\n  document.cookie = \"usedletters=\" + usedLetters;\n  console.log(document.cookie);\n}\n\n/**\n * Loads the page's and game's state from \n * the user's local storage when the page loads\n */\nexport function loadSavedStates() {\n  const temp = document.cookie.split(\";\").map(x => x.trim().split(\"=\"));\n  let dict = {};\n  temp.forEach(function (item, index) {\n    dict[item[0]] = item[1];\n  });\n\n  // If the cookie does not exist, load start page.\n  if (document.cookie === \"\") {\n    dict[\"page\"] = \"start\";\n  }\n\n  return dict;\n}\n","import React from 'react'\n\nconst WrongLetters = ({ wrongLetters }) => {\n\n  return (\n    <div className=\"wrong-letters-container\">\n      <div>\n        {wrongLetters.length > 0 && \n          <p>Wrong</p>\n        }\n        {wrongLetters\n          .map((letter, i) => <span key={i}>{letter}</span>)\n          .reduce((prev, curr) => prev === null ? [curr] : [prev, ', ', curr], null)}\n      </div>\n    </div>\n  )\n}\n\nexport default WrongLetters","import React from 'react'\n\nconst Word = ({ selectedWord, correctLetters }) => {\n  return (\n    <div className=\"word\">\n      {selectedWord.split('').map((letter, i) => {\n        return (\n          <span className=\"letter\" key={i}>\n            {correctLetters.includes(letter) ? letter : ''}\n          </span>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Word\n","import React from 'react'\n\nconst Figure = ({wrongLetters}) => {\n  const errors = wrongLetters.length\n  \n  return (\n    <svg height=\"250\" width=\"200\" class=\"figure-container\">\n     {/* <!-- Rod --> */}\n     <line x1=\"60\" y1=\"20\" x2=\"140\" y2=\"20\" />\n      <line x1=\"140\" y1=\"20\" x2=\"140\" y2=\"50\" />\n      <line x1=\"60\" y1=\"20\" x2=\"60\" y2=\"230\" />\n      <line x1=\"20\" y1=\"230\" x2=\"100\" y2=\"230\" />\n\n      {/* <!-- Head --> */}\n      {errors < 6  &&\n        <circle cx=\"140\" cy=\"70\" r=\"20\" />\n      }\n      {/* <!-- Body --> */}\n      {errors < 5  &&\n        <line x1=\"140\" y1=\"90\" x2=\"140\" y2=\"150\" />\n      }\n      {/* <!-- Arms --> */}\n      {errors < 4  &&\n        <line x1=\"140\" y1=\"120\" x2=\"120\" y2=\"100\" />\n      }\n      {errors < 3 &&\n        <line x1=\"140\" y1=\"120\" x2=\"160\" y2=\"100\" />\n      }\n      {/* <!-- Legs --> */}\n      {errors < 2 &&\n        <line x1=\"140\" y1=\"150\" x2=\"120\" y2=\"180\" />\n      }\n      {errors < 1 &&\n        <line x1=\"140\" y1=\"150\" x2=\"160\" y2=\"180\" />\n      }\n    </svg>\n  )\n}\n\nexport default Figure","export function showNotification(setter) {\n    setter(true);\n    setTimeout(() => {\n      setter(false);\n    }, 2000);\n  }\n  \n  export function checkWin(correct, wrong, word) {\n    let status = 'win';\n  \n    // Check for win\n    word.split('').forEach(letter => {\n      if(!correct.includes(letter)){\n        status = '';\n      }\n    });\n    \n    // Check for lose\n    if(wrong.length === 6) status = 'lose';\n  \n    return status\n  }","import React from 'react'\nimport '../assets/Keyboard.css';\n\nexport default function Keyboard({ }) {\n  return (\n    <>\n      <button type=\"button\" class=\"keys\" id=\"q-key\"> Q </button>\n      <button type=\"button\" class=\"keys\" id=\"w-key\"> W </button>\n      <button type=\"button\" class=\"keys\" id=\"e-key\"> E </button>\n      <button type=\"button\" class=\"keys\" id=\"r-key\"> R </button>\n      <button type=\"button\" class=\"keys\" id=\"t-key\"> T </button>\n      <button type=\"button\" class=\"keys\" id=\"y-key\"> Y </button>\n      <button type=\"button\" class=\"keys\" id=\"u-key\"> U </button>\n      <button type=\"button\" class=\"keys\" id=\"i-key\"> I </button>\n      <button type=\"button\" class=\"keys\" id=\"o-key\"> O </button>\n      <button type=\"button\" class=\"keys\" id=\"p-key\"> P </button>\n      <br />\n      <button type=\"button\" class=\"keys\" id=\"a-key\"> A </button>\n      <button type=\"button\" class=\"keys\" id=\"s-key\"> S </button>\n      <button type=\"button\" class=\"keys\" id=\"d-key\"> D </button>\n      <button type=\"button\" class=\"keys\" id=\"f-key\"> F </button>\n      <button type=\"button\" class=\"keys\" id=\"g-key\"> G </button>\n      <button type=\"button\" class=\"keys\" id=\"h-key\"> H </button>\n      <button type=\"button\" class=\"keys\" id=\"j-key\"> J </button>\n      <button type=\"button\" class=\"keys\" id=\"k-key\"> K </button>\n      <button type=\"button\" class=\"keys\" id=\"l-key\"> L </button>\n      <br />\n      <button type=\"button\" class=\"keys\" id=\"z-key\"> Z </button>\n      <button type=\"button\" class=\"keys\" id=\"x-key\"> X </button>\n      <button type=\"button\" class=\"keys\" id=\"c-key\"> C </button>\n      <button type=\"button\" class=\"keys\" id=\"v-key\"> V </button>\n      <button type=\"button\" class=\"keys\" id=\"b-key\"> B </button>\n      <button type=\"button\" class=\"keys\" id=\"n-key\"> N </button>\n      <button type=\"button\" class=\"keys\" id=\"m-key\"> M </button>\n    </>\n  );\n}\n","import React from 'react'\nimport '../assets/WinPage.css';\n\n/**\n * Represents all the elements on the winning page.\n * \n * @param {prop[]} props - variables being passed into this component\n * @returns HTML of the ending page.\n */\nexport default function WinPage({ changePageFn, currAnswer }) {\n  return (\n    <>\n      <div className='pageTitle' >You Won!</div>\n      <br />\n      <div>The word was: {currAnswer}</div>\n      <button onClick={() => {\n        changePageFn('start');\n      }\n      }>Next Word</button>\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react'\nimport '../assets/GamePlayingPage.css';\nimport { loadSavedStates, saveGameState } from './LoadSaveGame';\nimport WrongLetters from './WrongLetters';\nimport Word from './Word';\nimport Figure from './Figure';\nimport { showNotification as show, checkWin } from '../helpers/helpers';\nimport Keyboard from './Keyboard'\nimport WinPage from './WinPage';\n\n\n/**\n * Represents all the elements on the playing page.\n * \n * @param {prop[]} props - variables being passed into this component\n * @returns HTML of the playing page.\n */\n\nexport default function GamePlayingPage({ changePageFn, currCategory, currAnswer, toLong, saveOnGuess, changeAnswer }) {\n  let selectedWord = currAnswer;\n  const [playable, setPlayable] = useState(true);\n  const [correctLetters, setCorrectLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [showNotification, setShowNotification] = useState(false);\n\n  useEffect(() => {\n    const handleKeydown = event => {\n      const { key, keyCode } = event;\n      if (playable && keyCode >= 65 && keyCode <= 90) {\n        const letter = key.toLowerCase();\n        if (selectedWord.includes(letter)) {\n          if (!correctLetters.includes(letter)) {\n            setCorrectLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            show(setShowNotification);\n          }\n        } else {\n          if (!wrongLetters.includes(letter)) {\n            setWrongLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            show(setShowNotification);\n          }\n        }\n      }\n    }\n    window.addEventListener('keydown', handleKeydown);\n\n    return () => window.removeEventListener('keydown', handleKeydown);\n  }, [correctLetters, wrongLetters, playable]);\n\n  function playAgain() {\n    setPlayable(true);\n\n    setCorrectLetters([]);\n    setWrongLetters([]);\n\n  }\n\n  function changePageOnEnd(correctLetters, wrongLetters, selectedWord, setPlayable, playAgain) {\n    let playable = true;\n    if (checkWin(correctLetters, wrongLetters, selectedWord) === 'win') {\n      playable = false;\n      changePageFn('win');\n\n    } else if (checkWin(correctLetters, wrongLetters, selectedWord) === 'lose') {\n      playable = false;\n      changePageFn('lose');\n\n    }\n  }\n\n  return (\n    <>\n      <Figure wrongLetters={wrongLetters} />\n      <WrongLetters wrongLetters={wrongLetters} />\n      <Word selectedWord={selectedWord} correctLetters={correctLetters} />\n      <br />\n\n      <div>note: Type to input, the on-screen keyboard does not work.</div>\n      <br />\n      <div>Category: {toLong(currCategory)}</div>\n      {changePageOnEnd(correctLetters, wrongLetters, selectedWord)}\n      <Keyboard />\n    </>\n  );\n}\n","import React from 'react'\nimport '../assets/LosePage.css';\n\n/**\n * Represents all the elements on the losing page.\n * \n * @param {prop[]} props - variables being passed into this component\n * @returns HTML of the ending page.\n */\nexport default function LosePage({ changePageFn, currAnswer }) {\n  return (\n    <>\n      <div className='pageTitle' >You Lost.</div>\n      <div>The word was: {currAnswer}</div>\n      <br />\n      <button onClick={() => {\n        changePageFn('start');\n      }\n      }>Try Again</button>\n    </>\n  );\n}\n","import React from 'react'\nimport '../assets/ChooseCategoryPage.css';\n\n/**\n * Represents all the elements on the category choosing page.\n * \n * @param {prop[]} props - variables being passed into this component\n * @returns HTML of the start page.\n */\nexport default function ChooseCategoryPage({ changePageFn, setNewCategory, setNewRandCategory, categoryList, toShort }) {\n  return (\n    <>\n      <div className='pageTitle' >Select a Category</div>\n\n      {/* List of buttons for player to choose their category */}\n      {categoryList(false).map(category => {\n        return (\n          <>\n            <button onClick={() => {\n              setNewCategory(toShort(category));\n              changePageFn('playing');\n            }\n            }>{category}</button>\n            <br />\n          </>\n        );\n      })}\n\n      <div>Or</div>\n\n      {/* Button for player to choose random category */}\n      <button onClick={() => {\n        setNewRandCategory();\n        changePageFn('playing');\n      }\n      }>Choose Random Category</button>\n    </>\n  );\n}\n","/**\n * WordCategoryPicker\n * \n * Provides functions that pick a random word or random category. \n */\n\n/**\n * A map of shortNames to longNames of categories.\n * Used to get the correct words from the category in the bank.\n * \n * things that use short name:\n * category state\n * button-returned category\n * randomly generated categories\n * \n * things that use long name:\n * the headers in the wordbank itself\n * displaying to the user\n */\nconst CATEGORIES = new Map([\n  [\"foreign\", \"Foreign words used in English\"],\n  [\"names\", \"Gender neutral first names\"],\n  [\"choc\", \"Things that go well with chocolate\"],\n  [\"crush\", \"Things people do to impress their crush\"]\n]);\n\n/**\n * Sets the answer word to be a random word from the given category \n * \n * @param {string} categoryShort the shortName of the category of the word, \n * which can be either \"crush\", \"choc\", \"names\", or \"foreign\", and nothing else.\n * @param {object} wordBank the JSON file the words and categories are loaded from\n * @returns a random word from the given category\n */\nexport function getRandomWord(categoryShort, wordBank) {\n  if (!CATEGORIES.has(categoryShort)) {\n    console.error(\"WordCategoryPicker.js: Tried to get a word from an invalid category: \" + categoryShort);\n  }\n\n  let wordsInThisCategory = wordBank[CATEGORIES.get(categoryShort)];\n  return getRandomElem(wordsInThisCategory);\n}\n\n/**\n * Returns the shortName of a random category\n * \n * @returns the shortName of a random category\n */\nexport function getRandomCategory() {\n  return getRandomElem(getAllCategories(true));\n}\n\n/**\n * Returns an array of all the categories the answer can be taken from.\n * \n * @param {boolean} isShortName whether the returned names are short or long.\n * @returns an array of all the categories in the CATEGORIES map\n */\nexport function getAllCategories(isShortName) {\n  const allCats = [];\n  let group = isShortName ? CATEGORIES.keys() : CATEGORIES.values();\n\n  for (let cat of group) {\n    allCats.push(cat);\n  }\n  return allCats;\n}\n\n/**\n * Converts the short name of the category to its long name.\n * \n * @param {string} shortName of the category\n * @returns the long name of the category\n */\nexport function toLong(shortName) {\n  return CATEGORIES.get(shortName);\n}\n\n/**\n * Converts the long name of the category to its short name.\n * \n * @param {string} longName of the category\n * @returns the short name of the category\n */\nexport function toShort(longName) {\n  return [...CATEGORIES].find(([key, val]) => val === longName)[0];\n}\n\n/**\n * Returns a random element from an array.\n * Referenced from Corey on stack overflow\n * https://stackoverflow.com/a/5915122/16777554\n * \n * @param {*} array to pick the element from\n */\nfunction getRandomElem(array) {\n  const randFloatingIndex = Math.random() * array.length;\n  const randIndex = Math.floor(randFloatingIndex);\n  return array[randIndex];\n}\n","import React, { useState, useEffect } from \"react\";\nimport '../assets/App.css';\nimport GameStartPage from \"./GameStartPage\";\nimport GamePlayingPage from \"./GamePlayingPage\";\nimport WinPage from \"./WinPage\";\nimport LosePage from \"./LosePage\";\nimport ChooseCategoryPage from \"./ChooseCategoryPage\";\nimport { saveGameState, loadSavedStates } from \"./LoadSaveGame\";\nimport { getRandomWord, getRandomCategory, getAllCategories, toShort, toLong } from \"./WordCategoryPicker\";\nimport Figure from \"./Figure\";\nimport WrongLetters from \"./WrongLetters\";\nimport Word from \"./Word\";\n\n/**\n * Creates everything that you see on the webpage.\n * \n * @returns The generated html css of all the components combined\n */\nfunction App() {\n\n  // ----- declarations ----- \n\n  // React-tracked variables\n  // the pageState on launch will be set to 'start'\n  const [pageState, setPageState] = useState('start');\n  const [category, setCategory] = useState('names'); // shortNames of the category\n  const [answer, setAnswer] = useState('names');\n  const [lives, setLives] = useState(7);\n  const [usedLetters, setUsedLetters] = useState('');\n\n  // An object containing all the words to choose from\n  const wordBank = require('./wordbank.json');\n\n\n  // ----- hooks ----- \n\n  /**\n   * Set up the game when the page loads.\n   */\n  useEffect(() => {\n    let data = loadSavedStates();\n    setPageState(data[\"page\"]);\n    setCategory(data[\"category\"]);\n    setAnswer(data[\"word\"]);\n    setLives(data[\"lives\"]);\n    setUsedLetters(data[\"usedletters\"]);\n  }, []);\n\n  // ----- functions -----\n\n  /**\n   * To be called when player makes a guess.\n   * Saves the page's state to cookies so that player does not lose progress when they reload.\n   */\n  function saveOnGuess() {\n    saveGameState(pageState, category, answer, lives, usedLetters);\n  }\n\n  /**\n   * Changes the page to the specified one.\n   * The setPageState function has been defined by the useState hook API\n   * \n   * @param {string} nextPage - The next page to load\n   */\n  function handlePageChange(nextPage) {\n    saveGameState(nextPage, category, answer, lives, usedLetters);\n    setPageState(prevPage => {\n      return nextPage;\n    });\n  }\n\n  /**\n   * Changes the category to the specified one, in shortName format.\n   * Note: relies on handleAnswerChange to save state\n   * \n   * @param {string} newCategory the short name of the new category\n   */\n  function handleCategoryChange(newCategory) {\n    setCategory(prevCategory => { // apparently queues the update to happen when on the next DOM refresh.\n      return newCategory;\n    });\n    handleAnswerChange(newCategory);\n  }\n\n  /**\n   * Changes the category to a random new category, saved as its shortName.\n   * Note: relies on handleAnswerChange to save state\n   */\n  function handleRandomCategoryChange() {\n    let randCat = getRandomCategory();\n    setCategory(prevCategory => {\n      return randCat;\n    });\n    handleAnswerChange(randCat);\n  }\n\n  /**\n   * Sets the answer to a new answer from the current category.\n   */\n  function handleAnswerChange(newCategory) {\n    let newWord = getRandomWord(newCategory, wordBank); // the category being used is the old one\n    setAnswer(prevAnswer => {\n      if (prevAnswer === newWord) {\n        handleAnswerChange(newCategory);\n      } else {\n        saveGameState(pageState, newCategory, newWord, lives, usedLetters);\n        return newWord;\n      }\n    });\n  }\n\n  // ----- main html on page ----- \n\n  // Display either the start, playing or end page at any time.\n  switch (pageState) {\n    case 'start':\n      return <GameStartPage changePageFn={handlePageChange} />;\n    case 'category':\n      return <ChooseCategoryPage\n        changePageFn={handlePageChange}\n        setNewCategory={handleCategoryChange}\n        setNewRandCategory={handleRandomCategoryChange}\n        categoryList={getAllCategories}\n        toShort={toShort}\n      />;\n    case 'playing':\n      return <GamePlayingPage\n        changePageFn={handlePageChange}\n        currCategory={category}\n        currAnswer={answer}\n        toLong={toLong}\n        saveOnGuess={saveOnGuess}\n        changeAnswer={handleAnswerChange}\n      />;\n    case 'win':\n      return <WinPage\n        changePageFn={handlePageChange}\n        currAnswer={answer}\n      />;\n    case 'lose':\n      return <LosePage\n        changePageFn={handlePageChange}\n        currAnswer={answer}\n      />;\n    default:\n      console.error('Tried to load \\'' + pageState + '\\' which is an invalid page state.');\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './assets/index.css';\nimport App from './components/App';\nimport reportWebVitals from './components/reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}